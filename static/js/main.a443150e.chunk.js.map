{"version":3,"sources":["logo.jpg","components/Navbar.js","pages/About.js","data/gitHubAPI.js","redux/constants/actionTypes.js","redux/actions/reposAction.js","components/SearchForm.js","customHooks.js","pages/Home.js","pages/SearchResults.js","redux/reducers/reposReducer.js","redux/reducers/index.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","src","logo","alt","to","About","href","target","rel","fetchRepositories","inputValue","a","reposURL","fetch","result","ok","console","error","status","json","then","message","ActionTypes","setRepositories","repositories","type","payload","SearchForm","useState","searchPhrase","setSearchPhrase","isSearching","dispatch","useSelector","state","allGitHubRepos","useDispatch","debouncedGetResponse","useCallback","value","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","getResponse","param","items","log","placeholder","onChange","event","Home","organization","SearchResults","initialState","isFetching","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a443150e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.bc732cec.jpg\";","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './Navbar.scss'\r\nimport logo from '../logo.jpg';\r\n\r\nexport const Navbar = () => (\r\n    <nav className=\"navigation\">\r\n        <div>\r\n            <img src={logo} className=\"navigation__logo\" alt=\"Github search logo\" />\r\n        </div>\r\n        <ul className=\"navigation__link-section\">\r\n            <li>\r\n                <NavLink \r\n                    className=\"\"\r\n                    to=\"/\"\r\n                >\r\n                    Home\r\n                </NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink \r\n                    className=\"\"\r\n                    to=\"/about\"\r\n                >\r\n                    About\r\n                </NavLink>\r\n            </li>\r\n        </ul>\r\n\r\n    </nav>\r\n)","import React from 'react';\r\n\r\nexport const About = () => {\r\n     return (\r\n        <>\r\n            <h3>Web application, which lists the repositories and organizations by search term.</h3>\r\n            <p>Source code: <a href=\"https://github.com/Evgeniy241984/github-search-app-react\" target=\"_blank\" rel=\"noreferrer\"> Github-search-app-react </a></p>\r\n            <p>Used API: <a href=\"https://api.github.com\" target=\"_blank\" rel=\"noreferrer\">https://api.github.com </a></p>\r\n        </>\r\n    )\r\n}\r\n ","import { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n\r\nfunction getGiHubOrgUrl(orgsName) {\r\n    return `https://api.github.com/orgs/${orgsName}`;\r\n}\r\n\r\nfunction getGiHubReposUrl(repoName) {\r\n    return `https://api.github.com/search/repositories?q=${repoName}`;\r\n}\r\n\r\nconst fetchRepositories = async (inputValue) => {\r\n    try {\r\n        const reposURL = getGiHubReposUrl(inputValue);\r\n        const result = await fetch(reposURL);\r\n\r\n        if (!result.ok) {\r\n            console.error('Could not fetch', result.status);\r\n            return false;\r\n        }\r\n        return await result.json()\r\n            .then(result => result)\r\n    }\r\n    \r\n    catch (error) {\r\n        console.error('Could not fetch', error.message);\r\n        return false;\r\n    };;\r\n    \r\n} \r\n\r\n\r\n/* const loadOrgData = (inputValue) => {\r\n\r\n    const orgsURL = getGiHubOrgUrl(inputValue);\r\n\r\n    return  fetch(orgsURL)\r\n        .then(res => res.json())\r\n        .then(result => result)\r\n        .catch((error) => {\r\n            console.error(error);\r\n            return [];\r\n        });\r\n\r\n} */\r\n\r\nexport default fetchRepositories;","export const ActionTypes = {\r\n    SET_REPOSITORIES: \"SET_REPOSITORIES\",\r\n}"," import { ActionTypes } from \"../constants/actionTypes\"   \r\n \r\n export const setRepositories = (repositories) => {\r\n     return {\r\n        type: ActionTypes.SET_REPOSITORIES,\r\n        payload: repositories,\r\n     }\r\n };","import React, {useState, useEffect, useCallback} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loadOrgData } from '../data/gitHubAPI';\r\nimport fetchRepositories from '../data/gitHubAPI';\r\nimport { useDebounce } from '../customHooks';\r\nimport {setRepositories} from '../redux/actions/reposAction';\r\nimport { Results } from './Results';\r\n\r\n\r\n\r\nexport const SearchForm = () => {\r\n    const [searchPhrase, setSearchPhrase] = useState('');\r\n   /*  const [repositories, setRepositories] = useState(''); */\r\n    const [isSearching, setIsSearching] = useState(false);\r\n    const repositories = useSelector((state) => state.allGitHubRepos.repositories);\r\n    const dispatch = useDispatch();\r\n\r\n    const debouncedGetResponse = useCallback(\r\n      useDebounce( \r\n      value => fetchRepositories(value), 500),\r\n      []\r\n    );\r\n\r\n    const getResponse = async param => {\r\n      const result = await fetchRepositories(param);\r\n      \r\n      if (result) {\r\n        setRepositories(result.items)\r\n        console.log(result.items)\r\n      }\r\n    }\r\n\r\n    useEffect(() => {  \r\n        getResponse('');\r\n      },[]\r\n    );\r\n\r\n    const handleInputChange = (event) => {\r\n      const value = event.target.value;\r\n\r\n      dispatch(setSearchPhrase(value))\r\n      debouncedGetResponse(value);     \r\n    }\r\n\r\n    return (\r\n      <>\r\n          <form className=\"search-form\"> \r\n              <div className=\"search-form__group\">\r\n                  <input \r\n                      type=\"text\"\r\n                      className=\"search-form__input\"\r\n                      placeholder=\"GitHub organizations\"\r\n                      value={searchPhrase}\r\n                      onChange={handleInputChange}\r\n                  />\r\n              </div>\r\n              <div>\r\n                {isSearching && <div>Searching ...</div>}\r\n              </div>\r\n          </form>  \r\n          \r\n      </>         \r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\n\r\n\r\n// Hook\r\nexport function useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","import React from 'react';\r\nimport { SearchForm } from '../components/SearchForm';\r\n\r\nexport const Home = (organization, repositories) => {\r\n\r\n    return (\r\n        <>\r\n            <div>    \r\n                <SearchForm />\r\n            </div> \r\n        </>\r\n        \r\n    )\r\n}","import React from 'react';\r\n\r\nexport const SearchResults = () => {\r\n    return (\r\n        <>\r\n        This is results\r\n        </>\r\n    )\r\n}","import { ActionTypes } from \"../constants/actionTypes\"\r\n\r\nconst initialState = {\r\n    repositories: [],\r\n    isFetching: true,\r\n}\r\n\r\nexport const reposReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case ActionTypes.SET_REPOSITORIES: \r\n            return { ...state, repositories: payload };\r\n        default: \r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport {createStore} from 'redux';\r\nimport {reposReducer} from './reposReducer';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst rootReducer = combineReducers({\r\n    allGitHubRepos: reposReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, {}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() );\r\n\r\nexport default store;\r\n","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Navbar} from './components/Navbar';\nimport {About} from './pages/About';\nimport {Home} from './pages/Home';\nimport { SearchResults } from './pages/SearchResults';\nimport {Provider} from 'react-redux';\nimport store from './redux/reducers/index';\n\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Navbar />\n          <Switch>\n            <Route path={'/'} exact component = {Home} />\n            <Route path={'/results'} exact component = {SearchResults} />\n            <Route path={'/about'} exact component = {About} />\n          </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}