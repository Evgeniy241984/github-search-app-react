{"version":3,"sources":["logo.jpg","components/Navbar.js","pages/SplashScreen.js","pages/About.js","data/gitHubAPI.js","redux/constants/actionTypes.js","components/SearchResult.js","components/SearchForm.js","customHooks.js","redux/actions/reposAction.js","pages/MainSearch.js","redux/reducers/reposReducer.js","redux/reducers/index.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","className","src","logo","alt","to","SplashScreen","About","href","target","rel","fetchRepositories","inputValue","a","reposURL","fetch","result","ok","console","error","status","json","then","message","ActionTypes","SearchResult","repositoriesList","useSelector","state","allGitHubRepos","repositories","map","repo","id","html_url","full_name","SearchForm","useState","searchPhrase","setSearchPhrase","isFetching","dispatch","useDispatch","debouncedValue","value","delay","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","param","type","payload","items","getResponse","placeholder","onChange","event","MainSearch","initialState","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c42bf054.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.bc732cec.jpg\";","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './Navbar.scss';\r\nimport logo from '../logo.jpg';\r\n\r\nexport const Navbar = () => (\r\n    <nav className=\"navigation\">\r\n        <div>\r\n            <img src={logo} className=\"navigation__logo\" alt=\"Github search logo\" />\r\n        </div>\r\n        <ul className=\"navigation__link-section\">\r\n            <li>\r\n            <NavLink \r\n                    className=\"\"\r\n                    to=\"/\"\r\n                >\r\n                    Home\r\n            </NavLink>\r\n            </li>\r\n            <li>\r\n            <NavLink \r\n                    className=\"\"\r\n                    to=\"/about\"\r\n                >\r\n                    About\r\n            </NavLink>\r\n            </li>\r\n        </ul>\r\n\r\n    </nav>\r\n)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport const SplashScreen = () => (\r\n    <div className=\"splashscreen\">\r\n        <NavLink \r\n                    className=\"\"\r\n                    to=\"/main-search\"\r\n                >\r\n                    Start Search\r\n        </NavLink>  \r\n    </div>\r\n)","import React from 'react';\r\n\r\nexport const About = () => {\r\n     return (\r\n        <>\r\n            <h3>Web application, which lists GitHub repositories by search term.</h3>\r\n            <p>GitHub repo: <a href=\"https://github.com/Evgeniy241984/github-search-app-react\" target=\"_blank\" rel=\"noreferrer\"> Github-search-app-react </a></p>\r\n            <p>Used API: <a href=\"https://api.github.com\" target=\"_blank\" rel=\"noreferrer\">https://api.github.com </a></p>\r\n            <p>Features: </p>\r\n            <ol>\r\n                <li>\r\n                    <p>The project was developed as a single page application on React</p>\r\n                </li>\r\n                <li>\r\n                    <p>Has Redux State management</p>\r\n                </li>\r\n                <li>\r\n                    <p>Used SCSS and responsive styles</p>\r\n                </li>\r\n                <li>\r\n                    <p>Search has debounce input 500 ms</p>\r\n                </li>\r\n\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n ","function getGiHubReposUrl(repoName) {\r\n    return `https://api.github.com/search/repositories?q=${repoName}`;\r\n}\r\n\r\nconst fetchRepositories = async (inputValue) => {\r\n    try {\r\n        const reposURL = getGiHubReposUrl(inputValue);\r\n        const result = await fetch(reposURL);\r\n\r\n        if (!result.ok) {\r\n            console.error('Could not fetch', result.status);\r\n            return false;\r\n        }\r\n        return await result.json()\r\n            .then(result => result)\r\n    }\r\n    \r\n    catch (error) {\r\n        console.error('Could not fetch', error.message);\r\n        return false;\r\n    };;\r\n    \r\n} \r\n\r\nexport default fetchRepositories;","export const ActionTypes = {\r\n    SET_REPOSITORIES: \"SET_REPOSITORIES\",\r\n    SET_IS_FETCHING: \"SET_IS_FETCHING\",\r\n}\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { RiGitRepositoryLine } from 'react-icons/ri';\r\nimport { IoLocationOutline } from \"react-icons/io5\";\r\nimport './SearchResult.scss';\r\n\r\nexport const SearchResult = () => {\r\n    const repositories = useSelector((state) => state.allGitHubRepos.repositories);\r\n    const repositoriesList = repositories.map((repo) => {\r\n        const {id, html_url, full_name} = repo;\r\n        return (\r\n            <li className=\"search-result__item\" key={id}>\r\n                    <div>\r\n                        <RiGitRepositoryLine />\r\n                    </div>\r\n                    <div>\r\n                        <a href={html_url}>{full_name}</a>   \r\n                    </div>\r\n                    <div>\r\n                    </div>\r\n                    <div>\r\n                    </div>\r\n                    <div>\r\n                    </div>\r\n            </li>           \r\n        )\r\n    })\r\n    return (\r\n        <div> \r\n        <ul> \r\n            <>\r\n              {repositoriesList}\r\n            </> \r\n        </ul> \r\n            <section>\r\n                <ul> \r\n                       {/*  <li>\r\n                            <a href={organization.html_url}>{organization.name}</a>\r\n                        </li> \r\n                        <li>\r\n                            {!organization.avatar_url ? \"\" : (\r\n                            <img src={organization.avatar_url} alt={organization.name} />\r\n                            )}\r\n                        </li>\r\n                        <li>\r\n                            {organization.description}\r\n                        </li>   \r\n                        <li>     \r\n                            {organization.location}\r\n                        </li> */}\r\n                </ul>    \r\n            </section>\r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n","import React, {useState, useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport fetchRepositories from '../data/gitHubAPI';\r\nimport { useDebounce } from '../customHooks';\r\nimport {setIsFetching, setRepositories} from '../redux/actions/reposAction';\r\nimport { SearchResult } from './SearchResult';\r\n\r\n\r\nexport const SearchForm = () => {\r\n    const [searchPhrase, setSearchPhrase] = useState('');\r\n    const isFetching = useSelector(state => state.allGitHubRepos.isFetching); \r\n    const dispatch = useDispatch();\r\n\r\n    const debouncedValue = useDebounce( searchPhrase, 500);\r\n    \r\n    useEffect(() => {\r\n\r\n      const getResponse = async param => {\r\n        dispatch(setIsFetching(true));\r\n        const result = await fetchRepositories(param);\r\n        dispatch(setRepositories(result.items));\r\n      }\r\n      \r\n        if (debouncedValue) {\r\n          getResponse(debouncedValue);\r\n        }  \r\n      },[dispatch, debouncedValue]\r\n    );\r\n\r\n    const handleInputChange = (event) => {\r\n      const value = event.target.value;\r\n\r\n      setSearchPhrase(value) \r\n    }\r\n\r\n    return (\r\n      <>\r\n          <form className=\"search-form\"> \r\n                  <input \r\n                      type=\"text\"\r\n                      className=\"search-form__input\"\r\n                      placeholder=\"GitHub organizations\"\r\n                      value={searchPhrase}\r\n                      onChange={handleInputChange}\r\n                  />\r\n          </form>\r\n          <div>\r\n          {isFetching === true\r\n              ? \r\n                <div className=\"search-form__fetching\">Searching...</div>\r\n              :\r\n                <SearchResult />\r\n            }\r\n          \r\n          </div>\r\n      </>         \r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\n\r\n\r\n// Hook\r\nexport function useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }"," import { ActionTypes } from \"../constants/actionTypes\"   \r\n \r\n export const setRepositories = (repositories) => {\r\n     return {\r\n        type: ActionTypes.SET_REPOSITORIES,\r\n        payload: repositories,\r\n     }\r\n };\r\n\r\n export const setIsFetching = (bool) => {\r\n     return {\r\n         type: ActionTypes.SET_IS_FETCHING,\r\n         payload: bool,\r\n     }\r\n};","import React from 'react';\r\nimport { SearchForm } from '../components/SearchForm';\r\n\r\nexport const MainSearch = () => {\r\n\r\n    return (\r\n        <>\r\n            <div>    \r\n                <SearchForm />\r\n            </div> \r\n        </>\r\n        \r\n    )\r\n}","import { ActionTypes } from \"../constants/actionTypes\"\r\n\r\nconst initialState = {\r\n    repositories: [],\r\n    isFetching: false,\r\n}\r\n\r\nexport const reposReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case ActionTypes.SET_REPOSITORIES: \r\n            return { \r\n                ...state, \r\n                repositories: payload,\r\n                isFetching: false \r\n            };\r\n        case ActionTypes.SET_IS_FETCHING: \r\n            return {\r\n                ...state,\r\n                isFetching: payload\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport {createStore} from 'redux';\r\nimport {reposReducer} from './reposReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    allGitHubRepos: reposReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, {}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() );\r\n\r\nexport default store;","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {Navbar} from './components/Navbar';\nimport {SplashScreen} from './pages/SplashScreen';\nimport {About} from './pages/About';\nimport {MainSearch} from './pages/MainSearch';\nimport store from './redux/reducers/index';\n\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Navbar/>\n          <Switch>\n            <Route path={'/'} exact component = {SplashScreen} />\n            <Route path={'/about'} exact component = {About} />\n            <Route path={'/main-search'} exact component = {MainSearch} />\n          </Switch>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}