{"version":3,"sources":["redux/constants/actionTypes.js","redux/reducers/reposReducer.js","redux/reducers/index.js","components/Header.js","pages/SplashScreen.js","pages/About.js","data/gitHubAPI.js","redux/actions/reposAction.js","components/SearchResult.js","utils.js","components/SearchForm.js","customHooks.js","pages/MainSearch.js","App.js","reportWebVitals.js","index.js"],"names":["ActionTypes","initialState","repositories","isFetching","nothingWasFound","rootReducer","combineReducers","allGitHubRepos","state","type","payload","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","Header","className","to","SplashScreen","About","href","target","rel","fetchRepositories","inputValue","a","reposURL","fetch","result","ok","console","error","status","json","then","message","setIsFetching","bool","SearchResult","repositoriesList","useSelector","map","repo","id","html_url","full_name","owner","topics","watchers","license","pushed_at","updateTime","Date","toLocaleString","day","month","year","topicsList","topic","key","src","avatar_url","alt","login","name","dateTime","SearchForm","useState","searchPhrase","setSearchPhrase","dispatch","useDispatch","debouncedValue","value","delay","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","param","total_count","items","getResponse","placeholder","onChange","event","onKeyDown","keyCode","preventDefault","MainSearch","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89045eee.chunk.js","sourcesContent":["export const ActionTypes = {\r\n    SET_REPOSITORIES: \"SET_REPOSITORIES\",\r\n    SET_IS_FETCHING: \"SET_IS_FETCHING\",\r\n    SET_NOTHING_WAS_FOUND: \"SET_NOTHING_WAS_FOUND\"\r\n}\r\n","import { ActionTypes } from \"../constants/actionTypes\"\r\n\r\nconst initialState = {\r\n    repositories: [],\r\n    isFetching: false,\r\n    nothingWasFound: false,\r\n}\r\n\r\nexport const reposReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case ActionTypes.SET_REPOSITORIES: \r\n            return { \r\n                ...state, \r\n                repositories: payload,\r\n                isFetching: false,\r\n                nothingWasFound: false,\r\n            };\r\n        case ActionTypes.SET_IS_FETCHING: \r\n            return {\r\n                ...state,\r\n                isFetching: payload,\r\n            };\r\n        case ActionTypes.SET_NOTHING_WAS_FOUND:\r\n            return {\r\n                ...state,\r\n                nothingWasFound: payload,\r\n            };\r\n        default: \r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport {createStore} from 'redux';\r\nimport {reposReducer} from './reposReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    allGitHubRepos: reposReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, {}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() );\r\n\r\nexport default store;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './Header.scss';\r\nimport { VscGithub } from 'react-icons/vsc'\r\n\r\nexport const Header = () => (\r\n    <div className=\"header\">\r\n        <div className=\"header__logo\">\r\n            <NavLink \r\n                    className=\"\"\r\n                    to=\"/github-search-app-react\"\r\n                >\r\n                <VscGithub className=\"header__logo_main\" />\r\n            </NavLink>         \r\n        </div>\r\n       \r\n        <nav className=\"navbar\"> \r\n            <ul className=\"navbar__list\">\r\n                <li>\r\n                <NavLink \r\n                        className=\"navbar__link\"\r\n                        to=\"/main-search\"\r\n                    >\r\n                        Search\r\n                </NavLink>\r\n                </li>\r\n                <li>\r\n                <NavLink \r\n                        className=\"navbar__link\"\r\n                        to=\"/about\"\r\n                    >\r\n                        About\r\n                </NavLink>\r\n                </li>\r\n            </ul>\r\n\r\n        </nav>\r\n    </div> \r\n)","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport './SplashScreen.scss';\r\n\r\nexport const SplashScreen = () => (\r\n    <div className=\"splashscreen\">\r\n        <h1 className=\"splashscreen_title\">\r\n            Hello, Friend! \r\n        </h1>\r\n        <h2 className=\"splashscreen_subtitle\">\r\n        Click the button to start searching for GitHub repositories.\r\n        </h2>\r\n        <NavLink \r\n                    className=\"splashscreen_button\"\r\n                    to=\"/main-search\"\r\n                >\r\n                    Start Search\r\n        </NavLink>  \r\n    </div>\r\n)","import React from 'react';\r\nimport './About.scss';\r\n\r\nexport const About = () => {\r\n     return (\r\n        <div className=\"about-page\">\r\n            <h2 className=\"about__title\">\r\n                Web application, which lists GitHub repositories by search term.\r\n            </h2>\r\n            <p className=\"about__text\">\r\n                GitHub repo:&nbsp; \r\n                <a href=\"https://github.com/Evgeniy241984/github-search-app-react\" target=\"_blank\" rel=\"noreferrer\"> \r\n                    github-search-app-react \r\n                </a>\r\n            </p>\r\n            <p className=\"about__text\">\r\n                Used API:&nbsp;\r\n                <a href=\"https://api.github.com\" target=\"_blank\" rel=\"noreferrer\">\r\n                    https://api.github.com \r\n                </a>\r\n            </p>\r\n            <p className=\"about__text\">Features: </p>\r\n            <ol className=\"featuresList\" type=\"1\">\r\n                <li className=\"featuresList__item\">\r\n                    <p>The project was developed as a single page application on React</p>\r\n                </li>\r\n                <li className=\"featuresList__item\">\r\n                    <p>Has Redux State management</p>\r\n                </li>\r\n                <li className=\"featuresList__item\">\r\n                    <p>Used SCSS and responsive styles</p>\r\n                    <p>(TODO: @mixins, variables, responsive design)</p>\r\n                </li>\r\n                <li className=\"featuresList__item\">\r\n                    <p>Search has debounce input 500 ms</p>\r\n                </li>\r\n                <li className=\"featuresList__item\">\r\n                    <p>\r\n                        Previous requests are shown in the history module (status: in development)\r\n                    </p> \r\n                    <p>\r\n                        History should be available after reloading the page or mobile application <br/> \r\n                            (will implement using Local Storage)\r\n                    </p>    \r\n                </li>\r\n            </ol>\r\n        </div>\r\n    )\r\n}\r\n ","function getGiHubReposUrl(repoName) {\r\n    return `https://api.github.com/search/repositories?q=${repoName}`;\r\n}\r\n\r\nconst fetchRepositories = async (inputValue) => {\r\n    try {\r\n        const reposURL = getGiHubReposUrl(inputValue);\r\n        const result = await fetch(reposURL);\r\n\r\n        if (!result.ok) {\r\n            console.error('Could not fetch', result.status);\r\n            return false;\r\n        }\r\n        return await result.json()\r\n            .then(result => result)\r\n    }\r\n    \r\n    catch (error) {\r\n        console.error('Could not fetch', error.message);\r\n        return false;\r\n    };;\r\n    \r\n} \r\n\r\nexport default fetchRepositories;"," import { ActionTypes } from \"../constants/actionTypes\"   \r\n \r\n export const setRepositories = (repositories) => {\r\n     return {\r\n        type: ActionTypes.SET_REPOSITORIES,\r\n        payload: repositories,\r\n     }\r\n };\r\n\r\n export const setIsFetching = (bool) => {\r\n     return {\r\n         type: ActionTypes.SET_IS_FETCHING,\r\n         payload: bool,\r\n     }\r\n};\r\n\r\nexport const setNothingWasFound = (bool) => {\r\n    return {\r\n        type: ActionTypes.SET_NOTHING_WAS_FOUND,\r\n        payload: bool,\r\n    }\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { getDateTimeFromUTC } from '../utils'\r\nimport { RiGitRepositoryLine } from 'react-icons/ri';\r\nimport { IoStarOutline } from 'react-icons/io5';\r\nimport './SearchResult.scss';\r\n\r\nexport const SearchResult = () => {\r\n    const repositories = useSelector((state) => state.allGitHubRepos.repositories);\r\n    \r\n    const repositoriesList = repositories.map((repo) => {\r\n        \r\n        const {id, html_url, full_name, owner, topics, watchers, license, pushed_at} = repo;\r\n\r\n        const updateTime = getDateTimeFromUTC(pushed_at);\r\n\r\n        const topicsList = topics.map((topic, key) => {\r\n\r\n            return (\r\n                <a key={key} className=\"search-item__topic\" href={`https://github.com/topics/${topic}`} rel=\"nofollow noopener noreferrer\" target=\"_blank\">{topic}</a>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <li className=\"search-result__item\" key={id}>\r\n                    <div className=\"search-item__icon\">\r\n                        <RiGitRepositoryLine className=\"search-item__icon_repo\"/>\r\n                    </div>\r\n                    <div className=\"search-item__description\">\r\n                        <div >\r\n                            <a className=\"search-item__repo-name\" href={html_url} rel=\"nofollow noopener noreferrer\" target=\"_blank\">{full_name}</a>   \r\n                        </div>\r\n\r\n                        <p className=\"search-item__owner\">\r\n                            <img className=\"owner__image\" src={owner.avatar_url} alt={owner.login} />\r\n                            <a className=\"owner__url\" href={owner.html_url} rel=\"nofollow noopener noreferrer\" target=\"_blank\">{owner.login} </a>\r\n                        </p>\r\n                        <div className=\"search-item__topicList\">\r\n                            {topicsList}\r\n                        </div>\r\n                        <div className=\"search-item__meta\">\r\n                            <div className=\"meta__stargazers\">\r\n                                <IoStarOutline className=\"meta__stargazers_icon\"/>\r\n                                {watchers}\r\n                            </div>\r\n                            <div className=\"meta__license\">\r\n                                {license == null ? \r\n                                    'No license' : license.name}\r\n                            </div>\r\n                            <div className=\"meta__last-update\">  \r\n                                <span>    \r\n                                    Updated on {\" \"} \r\n                                </span> \r\n                                <time dateTime={pushed_at}>\r\n                                    {updateTime}\r\n                                </time> \r\n                            </div>\r\n                        </div>\r\n                    </div> \r\n            </li>           \r\n        )\r\n    })\r\n    \r\n    return (\r\n        <ul>\r\n            {repositoriesList} \r\n        </ul>  \r\n    )\r\n\r\n}\r\n\r\n","export function getDateTimeFromUTC(dt) {\r\n    const date = new Date(dt);\r\n    const options = {\r\n        day: 'numeric',\r\n        month: 'long',\r\n        year: 'numeric'\r\n    }\r\n\r\n    return date.toLocaleString(\"en-US\", options)\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport fetchRepositories from '../data/gitHubAPI';\r\nimport { useDebounce } from '../customHooks';\r\nimport {setIsFetching, setRepositories, setNothingWasFound} from '../redux/actions/reposAction';\r\nimport { SearchResult } from './SearchResult';\r\nimport './SearchForm.scss'\r\n\r\n\r\nexport const SearchForm = () => {\r\n    const [searchPhrase, setSearchPhrase] = useState('');\r\n    const isFetching = useSelector(state => state.allGitHubRepos.isFetching);\r\n    const nothingWasFound = useSelector(state => state.allGitHubRepos.nothingWasFound);\r\n    const dispatch = useDispatch();\r\n\r\n    const debouncedValue = useDebounce( searchPhrase, 500);\r\n    \r\n    useEffect(() => {\r\n\r\n      const getResponse = async param => {\r\n        dispatch(setIsFetching(true));\r\n        const result = await fetchRepositories(param);\r\n        if (result.total_count !== 0) {\r\n          dispatch(setRepositories(result.items));\r\n        } \r\n        else {\r\n          dispatch(setNothingWasFound(true))\r\n          dispatch(setIsFetching(false))\r\n        }\r\n      }\r\n\r\n        if (debouncedValue) {\r\n          getResponse(debouncedValue);\r\n        }  \r\n      },[dispatch, debouncedValue]\r\n    );\r\n\r\n    const handleInputChange = (event) => {\r\n      const value = event.target.value;\r\n\r\n      setSearchPhrase(value) \r\n    }\r\n\r\n    const preventEnterKeyDown = (event) => {\r\n      if(event.keyCode === 13) {\r\n        event.preventDefault(); \r\n      }\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"search-container\">\r\n            <form className=\"search-form\"> \r\n                    <input \r\n                        type=\"text\"\r\n                        className=\"search-form__input\"\r\n                        placeholder=\"Search repositories\"\r\n                        value={searchPhrase}\r\n                        onChange={handleInputChange}\r\n                        onKeyDown={preventEnterKeyDown}\r\n                    />\r\n            </form>\r\n        </div> \r\n        <div className=\"search-result\">\r\n          {isFetching === true\r\n            ? \r\n               <div className=\"search-result__isFetching\">Searching...</div>\r\n            :\r\n              nothingWasFound === true\r\n            ?\r\n              <p className=\"search-result__nothingFound\"> \r\n                  Nothing was found, please make sure that the entered request is correct. \r\n              </p>\r\n            :\r\n              <SearchResult />\r\n          }\r\n        </div> \r\n      </>       \r\n    )\r\n}","import { useState, useEffect } from \"react\";\r\n\r\n\r\n// Hook\r\nexport function useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }","import React from 'react';\r\nimport { SearchForm } from '../components/SearchForm';\r\n\r\nexport const MainSearch = () => {\r\n\r\n    return (\r\n        <>\r\n            <SearchForm />\r\n        </>\r\n        \r\n    )\r\n}","import React from 'react';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport store from './redux/reducers/index';\nimport {Header} from './components/Header';\nimport {SplashScreen} from './pages/SplashScreen';\nimport {About} from './pages/About';\nimport {MainSearch} from './pages/MainSearch';\nimport './App.scss';\n\n\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Header/>\n        <div className=\"page__container\">\n          <Switch>\n            <Route path={'/github-search-app-react/'} exact component = {SplashScreen} />\n            <Route path={'/about'} exact component = {About} />\n            <Route path={'/main-search'} exact component = {MainSearch} />\n          </Switch>\n        </div> \n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}